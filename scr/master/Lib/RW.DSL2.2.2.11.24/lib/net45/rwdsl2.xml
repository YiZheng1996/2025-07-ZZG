<?xml version="1.0"?>
<doc>
    <assembly>
        <name>rwdsl2</name>
    </assembly>
    <members>
        <member name="F:RW.DSL.Components.Form1.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:RW.DSL.Components.Form1.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:RW.DSL.Components.Form1.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RW.DSL.Components.FunctionIterator">
            <summary>
            领域特性语言，函数组件
            </summary>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Invoke(System.String,RW.DSL.Values[])">
            <summary>
            执行函数
            </summary>
            <param name="key"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Set(System.String,System.Delegate)">
            <summary>
            设置一个新的函数，如果已存在将被替换
            </summary>
            <param name="key">函数名称</param>
            <param name="del">待执行的函数，可以是Action等委托</param>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Sets(System.Collections.Generic.Dictionary{System.String,System.Delegate})">
            <summary>
            使用字典添加一批函数
            </summary>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Import(RW.DSL.ProcedureVisitor,System.String,System.String,System.String[])">
            <summary>
            导入基于RWDSL的函数
            </summary>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.ImportContent(RW.DSL.ProcedureVisitor,System.String,System.String,System.String[])">
            <summary>
            导入基于RWDSL的函数
            </summary>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Get(System.String)">
            <summary>
            获取指定的函数
            </summary>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Remove(System.String)">
            <summary>
            移除指定的函数
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Clear">
            <summary>
            清空已添加的函数
            </summary>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.ExecuteCustomFunction(System.String,System.Object[])">
            <summary>
            执行函数，并传入指定的参数。必须与函数名称对应
            </summary>
            <param name="key">函数名称</param>
            <param name="args">参数</param>
        </member>
        <member name="M:RW.DSL.Components.FunctionIterator.Contains(System.String)">
            <summary>
            是否包含函数
            </summary>
            <param name="key">函数名称</param>
        </member>
        <member name="T:RW.DSL.Components.IDSLIterator`1">
            <summary>
            DSL迭代器，用于模块、方法、变量的控制
            </summary>
            <typeparam name="T">迭代类型</typeparam>
        </member>
        <member name="T:RW.DSL.Components.ModuleIterator">
            <summary>
            领域特性语言，模块组件
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Get(System.String,System.Int32[])">
            <summary>
            获取指定的模块,可以从全局模块中获取
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.GetDictionary">
            <summary>
            获取所有模块
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Set(System.String,System.Object)">
            <summary>
            设置一个任意类型的模块，如果模块已存在，将直接替换模块。
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Sets(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            设置一批任意类型的模块，如果模块存在，将直接替换
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Sets``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            设置一批特定类型的模块，如果模块存在，将直接替换
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.AddModules``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            添加指定类型的模块泛型
            </summary>
            <typeparam name="T">任意 型，可以是DS Module或其他</typeparam>
            <param name="modules">模块</param>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.AddModules(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            添加通用类型的模块泛型
            </summary>
            <typeparam name="T">任意类型，可以是DSLModule或其他</typeparam>
            <param name="modules">模块</param>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Remove(System.String)">
            <summary>
            移除指定的模块
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Clear">
            <summary>
            清空所有的模块（基于对象类型，私有、全局、系统），请注意：系统模块清空后将无法再使用。
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.InitModule">
            <summary>
            初始化模块，只有模块实现了IInit的类才会调用Init方法。
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Contains(System.String)">
            <summary>
            是否包含指定模块
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Invoke(System.String,RW.DSL.Values[])">
            <summary>
            调用指定模块成员，采用“模块.成员”的方式调用
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.Invoke(System.String,System.String,RW.DSL.Values[])">
            <summary>
            调用指定的模块成员
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.GetModuleProperity(System.String,System.String)">
            <summary>
            获取模块中的属性值
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.SetModuleProperity(System.String,System.String,System.Object,System.Int32[])">
            <summary>
            设置模块的值
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.InvokeModuleMember(System.String,System.String,System.Object[])">
            <summary>
            调用模块的成员，可以是方法和属性
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.GetModuleProperity(System.Object,System.String)">
            <summary>
            静态方法，获取指定对象的属性值
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.SetModuleProperity(System.Object,System.String,System.Object,System.Int32[])">
            <summary>
            设置模块的属性
            (除了是DSLModule类型，其他采用反射)
            </summary>
        </member>
        <member name="M:RW.DSL.Components.ModuleIterator.InvokeModuleMember(System.Object,System.String[],System.Object[])">
            <summary>
            支持多级的属性调用
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Get(System.String,System.Int32[])">
            <summary>
            根据名称获取变量
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.GetDictionary">
            <summary>
            获取所有变量
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Set(System.String,RW.DSL.Values,System.Int32[])">
            <summary>
            设置一个变量
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Set(System.String,System.Object)">
            <summary>
            设置一个变量（任意类型）
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Sets(System.String[],RW.DSL.Values[])">
            <summary>
            设置变量的集合
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Sets(System.Collections.Generic.Dictionary{System.String,RW.DSL.Values})">
            <summary>
            使用字典设置变量
            </summary>
            <param name="vars"></param>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Remove(System.String)">
            <summary>
            移除一个变量
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Clear">
            <summary>
            清空所有的变量
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Contains(System.String)">
            <summary>
            是否包含变量
            </summary>
        </member>
        <member name="M:RW.DSL.Components.VarIterator.Invoke(System.String,RW.DSL.Values[])">
            <summary>
            返回变量
            </summary>
        </member>
        <member name="T:RW.DSL.DebugVisitor">
            <summary>
            调试用，主要提供给工具编译时，快速读取变量参数等信息。
            </summary>
        </member>
        <member name="T:RW.DSL.DSLExtender">
            <summary>
            RWDSL中使用的扩展方法
            </summary>
        </member>
        <member name="M:RW.DSL.DSLExtender.ToArrayString(System.Collections.IList,System.String)">
            <summary>
            将数组用特定字符转换成字符串拼接
            </summary>
        </member>
        <member name="M:RW.DSL.DSLExtender.ToValues(System.Object,System.Boolean)">
            <summary>
            将一个对象转换成Values类型，
            <para>常规类型：bool,byte,sbyte,short,ushort,int,uint,float,double,decimal,string</para>
            <para>数组类型：IList对象均可支持，包含Array、泛型List等。</para>
            <para>普通对象：可访问属性和方法的对象。</para>
            </summary>
        </member>
        <member name="M:RW.DSL.DSLExtender.ToValuesArray(System.Collections.IList)">
            <summary>
            将普通数组转换成Values对象数组
            </summary>
        </member>
        <member name="M:RW.DSL.DSLExtender.ToDictionary``2(``0[],``1[])">
            <summary>
            将Key[]和value[]数组合并成字典
            </summary>
        </member>
        <member name="M:RW.DSL.DSLExtender.ToTimeSpan(RW.DSL.Values,System.String)">
            <summary>
            将Values类型转换成TimeSpan类型，可带单位
            </summary>
        </member>
        <member name="T:RW.DSL.DSLFactory">
            <summary>
            RWDSL的创建工厂，可快速创建访问器、过程 和 执行
            </summary>
        </member>
        <member name="M:RW.DSL.DSLFactory.CreateVisitor(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            创建编译器，用于编译和执行RWDSL（*.rw1）。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.DSLFactory.CreateProcedure(System.String,System.Int32)">
            <summary>
            创建执行器,Procedure要优于Visitor的使用，无需进行太多的交互式操作。
            </summary>
        </member>
        <member name="M:RW.DSL.DSLFactory.CreateProcedureWithContent(System.String,System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            根据内容创建执行器
            </summary>
        </member>
        <member name="M:RW.DSL.DSLFactory.CreateProcedureWithContent(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            根据内容创建执行器
            </summary>
        </member>
        <member name="M:RW.DSL.DSLFactory.CreateProcedureWithFile(System.String)">
            <summary>
            根据文件自动创建执行器
            </summary>
        </member>
        <member name="M:RW.DSL.DSLFactory.CreateProcedure(System.String,System.String,System.Windows.Forms.IWin32Window,System.Int32)">
            <summary>
            创建执行器，Procedure要优于Visitor的使用，无需进行太多的交互式操作。
            </summary>
        </member>
        <member name="M:RW.DSL.DSLFactory.Execute(System.Collections.Generic.Dictionary{System.String,RW.Procedure.IProcedure})">
            <summary>
            自动执行试验过程
            </summary>
            <param name="proces"></param>
        </member>
        <member name="T:RW.DSL.DSLHelper">
            <summary>
            可以快速获取或设置DSL中模块、变量、执行的帮助类
            <para>提供了三种类型变量池，私有、全局、系统；</para>
            <para>其中：私有和全局变量有使用者自己维护；</para>
            </summary>
        </member>
        <member name="F:RW.DSL.DSLHelper.Common">
            <summary>
            建议使用Global或System属性，默认使用了Global变量的引用
            </summary>
        </member>
        <member name="F:RW.DSL.DSLHelper.Global">
            <summary>
            全局变量    使用顺序   私有>=全局>=系统
            </summary>
        </member>
        <member name="F:RW.DSL.DSLHelper.System">
            <summary>
            系统变量    使用顺序   私有>=全局>=系统
            </summary>
        </member>
        <member name="F:RW.DSL.DSLHelper.CurrentForm">
            <summary>
            当前的页面，部分弹窗消息等UI交互信息
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.#ctor(RW.DSL.ProcedureVisitor)">
            <summary>
            初始化Helper的实例
            </summary>
        </member>
        <member name="P:RW.DSL.DSLHelper.Visitor">
            <summary>
            指定过程的访问器
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.GetVar(System.String)">
            <summary>
            根据名称获取变量
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.GetVars">
            <summary>
            获取所有变量
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.SetVar(System.String,System.Object)">
            <summary>
            设置一个变量
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.AddVar(System.String,System.Object)">
            <summary>
            添加一个变量（已过时，请考虑使用SetVar方法）
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.RemoveVar(System.String)">
            <summary>
            移除一个变量
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.ClearVars">
            <summary>
            清空所有的变量
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.DSLHelper.SetModuleProperity(System.Object,System.String,System.Object)">
            <summary>
            设置模块的属性
            (除了是DSLModule类型，其他采用反射)
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.GetModuleProperity(System.String,System.String)">
            <summary>
            获取模块中的属性值
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.InvokeModuleMember(System.String,System.String,System.Object[])">
            <summary>
            调用模块的成员，可以是方法和属性
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.InvokeModuleMember(System.Object,System.String,System.Object[])">
            <summary>
            调用对象的成员（静态），可以是方法和属性
            </summary>
            <param name="module"></param>
            <param name="member"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.DSLHelper.InvokeModuleMember(System.Object,System.String[],System.Object[])">
            <summary>
            支持多级的属性调用
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.InvokeModuleMethod(System.String,System.String,System.Object[])">
            <summary>
            调用模块中的方法
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.ToValues(System.Object)">
            <summary>
            将object类型转换成 Values 类型。
            自动识别object的实际类型，并转换。
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.Execute(RW.DSL.ProcedureBaseVisitor{System.Object},System.String)">
            <summary>
            执行的方法。执行某个Visitor根据指定的文本。
            </summary>
        </member>
        <member name="M:RW.DSL.DSLHelper.Execute(RW.DSL.ProcedureBaseVisitor{System.Object},System.String,System.Collections.Generic.List{System.Exception}@)">
            <summary>
            执行代码
            </summary>
            <param name="visitor"></param>
            <param name="input"></param>
            <param name="exes"></param>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.DSLHelper.Compiler(System.String)">
            <summary>
            编译代码
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="P:RW.DSL.DSLHelper.Functions">
            <summary>
            函数调用以及操作类
            </summary>
        </member>
        <member name="P:RW.DSL.DSLHelper.Modules">
            <summary>
            模块调用以及操作类
            </summary>
        </member>
        <member name="P:RW.DSL.DSLHelper.Vars">
            <summary>
            变量调用以及操作类
            </summary>
        </member>
        <member name="P:RW.DSL.DSLHelper.Collector">
            <summary>
            采集线程模块
            </summary>
        </member>
        <member name="T:RW.DSL.RWDSLException">
            <summary>
            领域语言异常
            </summary>
        </member>
        <member name="M:RW.DSL.RWDSLException.#ctor">
            <summary>
            默认构造
            </summary>
        </member>
        <member name="T:RW.DSL.ModuleException">
            <summary>
            模块错误，领域语言异常
            </summary>
        </member>
        <member name="T:RW.DSL.DSLGrammerException">
            <summary>
            RWDSL的语法异常
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.AverageFilter">
            <summary>
            平均值滤波法
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.RangeFilter">
            <summary>
            移动极差：测量一组数据中的离散程度
            最大值-最小值
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.AverageDeviFilter">
            <summary>
            平均偏差
            离均差：当前值-平均值
            求和(当前值-平均值)/n
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.StandardDeviFilter">
            <summary>
            标准差
            开方 （ 求和（离均差）²/n)
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.MaxFilter">
            <summary>
            最大值滤波
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.MinFilter">
            <summary>
            最小值滤波
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.MiddleFilter">
            <summary>
            中位数滤波算法
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.RMSFilter">
            <summary>
            均方根滤波算法
            </summary>
        </member>
        <member name="T:RW.DSL.Filters.SmoothFilter">
            <summary>
            滑动平均滤波算法
            </summary>
        </member>
        <member name="M:RW.DSL.Filters.SmoothFilter.#ctor(System.String)">
            <summary>
            初始化滑动平均滤波算法
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:RW.DSL.Filters.SmoothFilter.FilterCount">
            <summary>
            滑动个数
            </summary>
        </member>
        <member name="P:RW.DSL.Filters.SmoothFilter.Value">
            <summary>
            返回当前计算的值
            </summary>
        </member>
        <member name="M:RW.DSL.Filters.SmoothFilter.Add(System.Double)">
            <summary>
            添加一个滤波，并返回计算后的滤波（实时计算）
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:RW.DSL.Log.DSLLog">
            <summary>
            领域代码日志
            </summary>
        </member>
        <member name="F:RW.DSL.Log.DSLLog.Instance">
            <summary>
            默认构造实例对象
            </summary>
        </member>
        <member name="P:RW.DSL.Log.DSLLog.Enabled">
            <summary>
            调试日志是否开启,默认开启
            </summary>
        </member>
        <member name="P:RW.DSL.Log.DSLLog.DebugEnabed">
            <summary>
            Debug输出的开启状态
            </summary>
        </member>
        <member name="M:RW.DSL.Log.DSLLog.Append(System.String)">
            <summary>
            添加一条日志
            </summary>
        </member>
        <member name="M:RW.DSL.Log.DSLLog.AppendAll(System.String[])">
            <summary>
            追加一组日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:RW.DSL.Modules.CollectModule">
            <summary>
            自动采集模块
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.CollectModule.Start(System.String,System.Func{RW.DSL.Values},System.Int32,System.Int32,System.Int32)">
            <summary>
            开始采集
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.CollectModule.Stop">
            <summary>
            停止采集
            </summary>
            <param name="varname"></param>
        </member>
        <member name="P:RW.DSL.Modules.Commands.BaseCommand.RecordType">
            <summary>
            命令类型
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.Commands.BaseCommand.Indent">
            <summary>
            缩进 默认未0
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.Commands.CheckCommand">
            <summary>
            检测命令
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.Commands.WaitCommand">
            <summary>
            等待对象
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.Commands.WaitCommand.WaitTime">
            <summary>
            需要等待的时间（毫秒）
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.Commands.WriteCommand">
            <summary>
            写入对象
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.DSLModule">
            <summary>
            领域特性语言中，专用的模块层
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModule.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModule.#ctor(System.String)">
            <summary>
            自动注册模块名称的构造
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.Properties">
            <summary>
            描述所有的属性
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.AsyncWrite">
            <summary>
            是否支持异步写
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.Filter">
            <summary>
            滤波算法，默认采用滑动平均滤波
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.FilterCount">
            <summary>
            滑动数量
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.SkipCount">
            <summary>
            滑动滤波时前后丢弃的数量，如总数15，丢弃3，那么实际采集4-12共9个数据。
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.Interval">
            <summary>
            间隔时间 
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.Abs">
            <summary>
            绝对值
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.Round">
            <summary>
            保留小数位
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.SetLocal">
            <summary>
            是否是本地模式，本地模式的零点增益在文件中，否则存储在硬件介质中（如PLC中）
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModule.ActionsHistory">
            <summary>
            动作历史
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModule.LoadConfig(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            使用字典的方式加载配置信息
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModule.GetRegKey(System.String)">
            <summary>
            获取格式化的名称
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModule.Read(RW.Driver.IDriver,System.String)">
            <summary>
            读取，当指定名称为“值”时，将读取所有的值
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModule.Write(RW.Driver.IDriver,System.String,System.Object,RW.Modules.RightHandler,System.Int32)">
            <summary>
            写入值
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.DSLModuleHelper">
            <summary>
            领域Module帮助类
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.DSLModuleHelper.AutoConnectDriver">
            <summary>
            是否自动连接驱动
            </summary>
        </member>
        <member name="F:RW.DSL.Modules.DSLModuleHelper.ModuleErrors">
            <summary>
            当前所有模块的错误
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModuleHelper.GetModulesWithFile(System.String)">
            <summary>
            根据ini文件地址自动初始化创建领域模型的集合
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModuleHelper.GetModulesWithFile``1(System.String)">
            <summary>
            根据ini文件地址自动初始化创建领域模型的集合
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModuleHelper.CreateModule(System.String,System.String)">
            <summary>
            根据ini配置的Type名称和节点名称自动创建领域模型
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.DSLModuleHelper.InitModules(System.Collections.Generic.Dictionary{System.String,RW.DSL.Modules.DSLModule})">
            <summary>
            初始化领域模型是实体
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.ModbusDSLModule.Addr">
            <summary>
            用于标识不同的模块
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.SystemLogs">
            <summary>
            系统日志模块
            允许领域专家自动写日志。
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemLogs.Write(System.String)">
            <summary>
            写入
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemLogs.Error(System.String)">
            <summary>
            写入一条错误消息
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemLogs.Warning(System.String)">
            <summary>
            写入一条警告消息
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemLogs.Info(System.String)">
            <summary>
            写入一条消息
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemLogs.Debug(System.String)">
            <summary>
            写入一条调试消息
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.SystemModule">
            <summary>
            系统模块
            当前支持以下调用：
            系统 消息 '内容'
            系统 错误 '内容'
            系统 警告 '内容'
            系统 确认 '内容'
            系统 错误确认 '内容'
            系统 警告确认 '内容'
            </summary>
        </member>
        <member name="F:RW.DSL.Modules.SystemModule.Default">
            <summary>
            默认的系统模块
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.#ctor">
            <summary>
            默认构造,由于用到弹窗，会自动查找已打开的第一个页面作为主窗体
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.#ctor(System.Windows.Forms.IWin32Window)">
            <summary>
            指定操作的控件
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.Box(System.String)">
            <summary>
            消息提示
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.Error(System.String)">
            <summary>
            错误提示
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.Warning(System.String)">
            <summary>
            警告提示
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.Question(System.String)">
            <summary>
            人工确认
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.ErrorConfirm(System.String)">
            <summary>
            错误确认
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.WarningConfirm(System.String)">
            <summary>
            警告确认
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.YesOrNo(System.String)">
            <summary>
            是否提示
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.YesOrNoCancel(System.String)">
            <summary>
            包含 是、否、取消 3个按钮
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.Retry(System.String)">
            <summary>
            包含 重试、取消 两个按钮
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemModule.AbortRetry(System.String)">
            <summary>
            包含“中止”、“重试”、“忽略”3个按钮，分别为0，1，2
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.SystemThread">
            <summary>
            一种可以对当前线程操作的对象
            </summary>
        </member>
        <member name="F:RW.DSL.Modules.SystemThread.Default">
            <summary>
            全局线程模块，注意即便是全局的，具体操作上，还是操作本线程
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemThread.IsLog">
            <summary>
            当前线程日志状态
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemThread.Break">
            <summary>
            在下一个循环开始时，跳出循环
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemThread.Run(System.String)">
            <summary>
            运行指定的线程
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:RW.DSL.Modules.SystemThread.Stop(System.String)">
            <summary>
            停止指定的线程
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:RW.DSL.Modules.SystemTimer">
            <summary>
            系统计时器 v0.0.1
            
            author:yuanyong
            date:2020-08-01
            </summary>
        </member>
        <member name="F:RW.DSL.Modules.SystemTimer.Default">
            <summary>
            全局计时器
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemTimer.Name">
            <summary>
            获取当前计时器的名称
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemTimer.Create(System.String)">
            <summary>
            创建一个新的计时器实例
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemTimer.Switch(System.String)">
            <summary>
            切换
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemTimer.Start">
            <summary>
            开始
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemTimer.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemTimer.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.SystemTimer.Reset">
            <summary>
            重置
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemTimer.TotalSeconds">
            <summary>
            秒数
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemTimer.TotalMillonSeconds">
            <summary>
            毫秒数
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemTimer.TotalMinutes">
            <summary>
            分钟数
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemTimer.TotalHours">
            <summary>
            分钟数
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemTimer.TotalDays">
            <summary>
            分钟数
            </summary>
        </member>
        <member name="P:RW.DSL.Modules.SystemTimer.Times">
            <summary>
            时间
            </summary>
        </member>
        <member name="T:RW.DSL.Modules.ThreadData">
            <summary>
            一种线程操作的模块
            </summary>
        </member>
        <member name="M:RW.DSL.Modules.ThreadData.StopAll">
            <summary>
            停止所有线程，并等待线程结束
            </summary>
        </member>
        <member name="P:RW.DSL.Plugins.ProcedureDebugger.BreakPoints">
            <summary>
            获取所有的断点
            </summary>
        </member>
        <member name="M:RW.DSL.Plugins.ProcedureDebugger.AddBreakPoint(System.Int32)">
            <summary>
            添加断点
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:RW.DSL.Plugins.ProcedureDebugger.HasBreakPoint(System.Int32)">
            <summary>
            指定行是否由断点
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.Plugins.ProcedureDebugger.ClearBreakPoints">
            <summary>
            清空所有断点
            </summary>
        </member>
        <member name="M:RW.DSL.Plugins.ProcedureDebugger.NextLine">
            <summary>
            手动执行下一条指令
            </summary>
        </member>
        <member name="M:RW.DSL.Plugins.ProcedureDebugger.Continute">
            <summary>
            继续执行，直到命中下一个断点
            </summary>
        </member>
        <member name="M:RW.DSL.Plugins.ProcedureDebugger.CanRun(System.Int32)">
            <summary>
            判断是否可以运行
            </summary>
        </member>
        <member name="P:RW.DSL.Plugins.ProcedureDebugger.Running">
            <summary>
            获取运行状态
            </summary>
        </member>
        <member name="T:RW.DSL.Procedures.DSLProcedure">
            <summary>
            RWDSL的执行过程控制器
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.#ctor">
            <summary>
            创建DSLProcedure的实例
            </summary>
        </member>
        <member name="P:RW.DSL.Procedures.DSLProcedure.ProcedureName">
            <summary>
            过程名称
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.#ctor(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            使用标准文本，创建DSLProcedure的实例
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.#ctor(System.String,System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            使用标准文本，创建DSLProcedure的实例
            </summary>
        </member>
        <member name="F:RW.DSL.Procedures.DSLProcedure.visitor">
            <summary>
            请使用Visitor对象
            </summary>
        </member>
        <member name="P:RW.DSL.Procedures.DSLProcedure.Visitor">
            <summary>
            获取或设置当前的访问器
            </summary>
        </member>
        <member name="P:RW.DSL.Procedures.DSLProcedure.Input">
            <summary>
            获取或设置当前的文本
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.InitData(System.Windows.Forms.IWin32Window)">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="P:RW.DSL.Procedures.DSLProcedure.Modules">
            <summary>
            操作模块的对象
            </summary>
        </member>
        <member name="P:RW.DSL.Procedures.DSLProcedure.Vars">
            <summary>
            操作变量的对象
            </summary>
        </member>
        <member name="P:RW.DSL.Procedures.DSLProcedure.Functions">
            <summary>
            操作函数的对象
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.SetModule(System.String,System.Object)">
            <summary>
            添加模块
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.AddModule(System.String,System.Object)">
            <summary>
            添加模块
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.AddModules``1(System.Collections.Generic.Dictionary{System.String,``0})">
            <summary>
            添加指定泛型类型的模块。
            </summary>
            <typeparam name="T">通常的类型为DSLModule、IModule的实现类，也可以随便类型</typeparam>
            <param name="modules">字典类型</param>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.GetModule(System.String)">
            <summary>
            获取模块
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.AddVar(System.String,System.Object)">
            <summary>
            添加变量
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.SetVar(System.String,System.Object)">
            <summary>
            设置变量，自动添加
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.GetVar(System.String)">
            <summary>
            获取变量
            </summary>
        </member>
        <member name="E:RW.DSL.Procedures.DSLProcedure.DomainEventInvoked">
            <summary>
            领域事件
            </summary>
        </member>
        <member name="E:RW.DSL.Procedures.DSLProcedure.BeforeExecute">
            <summary>
            执行前触发
            </summary>
        </member>
        <member name="E:RW.DSL.Procedures.DSLProcedure.EndExecuted">
            <summary>
            执行后触发
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.Execute">
            <summary>
            开始执行领域语言试验过程
            </summary>
        </member>
        <member name="E:RW.DSL.Procedures.DSLProcedure.Executing">
            <summary>
            执行过程中（开始之前）
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.StartExecute">
            <summary>
            开始前执行
            </summary>
        </member>
        <member name="M:RW.DSL.Procedures.DSLProcedure.StopExecute">
            <summary>
            结束时执行
            </summary>
        </member>
        <member name="T:RW.DSL.ProcedureVisitor">
            <summary>
            自动试验过程解析
            
            v1.0.0.0
            语法说明：
            
            </summary>
        </member>
        <member name="F:RW.DSL.ProcedureVisitor.WAIT_INTERVAL">
            <summary>
            等待的间隔时间，默认为50ms。
            </summary>
        </member>
        <member name="F:RW.DSL.ProcedureVisitor.PULSE_INTERVAL">
            <summary>
            脉冲给定间隔时长，默认50ms
            </summary>
        </member>
        <member name="F:RW.DSL.ProcedureVisitor.CHECK_INTERVAL">
            <summary>
            检测命令间隔时长，默认10ms
            </summary>
        </member>
        <member name="F:RW.DSL.ProcedureVisitor.MAX_LOOP_COUNT">
            <summary>
            最大循环日志的数量（如果循环1000000次，还写日志吗？）
            </summary>
        </member>
        <member name="F:RW.DSL.ProcedureVisitor.Helper">
            <summary>
            参数、模块、变量等信息
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.SkipWait">
            <summary>
            可以跳过由于 WAIT语句造成的延时，一般用于调试；
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.Scrumed(System.Boolean)">
            <summary>
            急停操作，默认为急停，取消时，请设置false。需要手动设置取消，否则急停后无法运行。
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.Stopped">
            <summary>
            停止过程
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.Stoped">
            <summary>
            停止过程，拼接错误，请替换
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.Break">
            <summary>
            中断执行
            注意:调用此方法可能会导致不可预料的问题
            如：变频器高速运行中，直接分闸。
            变频器未通电发送了停止指令。
            但是，考虑到某些情况，需要复位点，程序需要复位行为时将特别好用。
            1、跳出循环
            2、执行中断后的所有false操作
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.Reset">
            <summary>
            重置状态码
            </summary>
        </member>
        <member name="E:RW.DSL.ProcedureVisitor.DomainEventInvoked">
            <summary>
            领域事件
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.DomainInvoke(System.String,System.Collections.Generic.List{System.Object})">
            <summary>
            手动触发一个领域事件
            </summary>
            <param name="name"></param>
            <param name="output"></param>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.Wait(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            等待异步信号
            </summary>
            <param name="names">需要等待的异步名</param>
            <param name="timeout">超时时间，为0时表示一直等待，单位毫秒。</param>
        </member>
        <member name="M:RW.DSL.ProcedureVisitor.Log(System.String)">
            <summary>
            记录日志，并打印在输出窗口
            </summary>
        </member>
        <member name="E:RW.DSL.ProcedureVisitor.PrintText">
            <summary>
            打印文本触发的事件
            </summary>
        </member>
        <member name="E:RW.DSL.ProcedureVisitor.Logger">
            <summary>
            记录日志时触发的事件
            </summary>
        </member>
        <member name="T:RW.DSL.DomainHandler`1">
            <summary>
            领域事件
            领域事件代码为：事件 名称 参数1,参数2,参数3,参数4
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sender"></param>
            <param name="name"></param>
            <param name="output"></param>
        </member>
        <member name="T:RW.DSL.ProcedureWait">
            <summary>
            领域过程同步操作类
            </summary>
        </member>
        <member name="F:RW.DSL.ProcedureWait.waits">
            <summary>
            存储了当前所有的同步线程
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureWait.CreateWait(System.String)">
            <summary>
            创建同步线程，可以指定名称。也可以自动生成
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureWait.RemoveWait(System.String)">
            <summary>
            移除某个等待线程（如果有），否则返回false
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureWait.ClearAll">
            <summary>
            移除所有等待线程
            </summary>
            <returns></returns>
        </member>
        <member name="M:RW.DSL.ProcedureWait.WaitAll(System.String)">
            <summary>
            同步等待所有的线程
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureWait.ResetAll">
            <summary>
            重置所有的线程
            </summary>
        </member>
        <member name="T:RW.DSL.Values">
            <summary>
            DSL中使用的值的类型，类型支持互转换，（Object的支持目前不太好）
            </summary>
        </member>
        <member name="M:RW.DSL.Values.#ctor">
            <summary>
            初始化创建Values的实例
            </summary>
        </member>
        <member name="M:RW.DSL.Values.#ctor(System.Double)">
            <summary>
            使用指定值初始化创建Values的实例
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RW.DSL.Values.#ctor(System.Double,System.String)">
            <summary>
            使用指定值和单位初始化创建Values的实例
            </summary>
            <param name="value"></param>
            <param name="unit"></param>
        </member>
        <member name="M:RW.DSL.Values.Sub(System.Double,System.Double)">
            <summary>
            算数减法运算
            </summary>
        </member>
        <member name="M:RW.DSL.Values.Div(System.Double,System.Double)">
            <summary>
            算数除法运算
            </summary>
        </member>
        <member name="M:RW.DSL.Values.Mul(System.Double,System.Double)">
            <summary>
            算数乘法运算
            </summary>
        </member>
        <member name="M:RW.DSL.Values.Add(System.Double,System.Double)">
            <summary>
            算数加法运算
            </summary>
        </member>
        <member name="P:RW.DSL.Values.ValueType">
            <summary>
            值单位的类型
            </summary>
        </member>
        <member name="M:RW.DSL.Values.CreateDateTime">
            <summary>
            创建一个系统时间对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:RW.DSL.Values.Value">
            <summary>
            关联的值
            </summary>
        </member>
        <member name="P:RW.DSL.Values.ObjectRef">
            <summary>
            模块调用的属性
            </summary>
        </member>
        <member name="P:RW.DSL.Values.Text">
            <summary>
            显示的文本
            </summary>
        </member>
        <member name="M:RW.DSL.Values.ToString">
            <summary>
            将Values显示成字符串形式，数值，数值 单位，array:[数值1，数值2],array:[数值1 单位,数值2 单位]
            </summary>
        </member>
        <member name="M:RW.DSL.Values.ToDateTime(System.IFormatProvider)">
            <summary>
            使用了unix时间戳，用int或long来表示1970-1-1(UTC)至今的
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="T:RW.DSL.ValueTypeEnums">
            <summary>
            值类型的枚举
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Bool">
            <summary>
            真假类型
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Int">
            <summary>
            整型
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Hex">
            <summary>
            16进制数
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Binary">
            <summary>
            二进制数
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Double">
            <summary>
            双精度浮点数
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.Array">
            <summary>
            数组
            </summary>
        </member>
        <member name="F:RW.DSL.ValueTypeEnums.String">
            <summary>
            字符串类型
            </summary>
        </member>
        <member name="T:RW.DSL.IProcedureListener">
            <summary>
            This interface defines a complete listener for a parse tree produced by
            <see cref="T:RW.DSL.ProcedureParser"/>.
            </summary>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterBreakElement(RW.DSL.ProcedureParser.BreakElementContext)">
            <summary>
            Enter a parse tree produced by the <c>breakElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitBreakElement(RW.DSL.ProcedureParser.BreakElementContext)">
            <summary>
            Exit a parse tree produced by the <c>breakElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterAsyncElement(RW.DSL.ProcedureParser.AsyncElementContext)">
            <summary>
            Enter a parse tree produced by the <c>asyncElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitAsyncElement(RW.DSL.ProcedureParser.AsyncElementContext)">
            <summary>
            Exit a parse tree produced by the <c>asyncElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterAwaitElement(RW.DSL.ProcedureParser.AwaitElementContext)">
            <summary>
            Enter a parse tree produced by the <c>awaitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitAwaitElement(RW.DSL.ProcedureParser.AwaitElementContext)">
            <summary>
            Exit a parse tree produced by the <c>awaitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterFuncElement(RW.DSL.ProcedureParser.FuncElementContext)">
            <summary>
            Enter a parse tree produced by the <c>funcElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitFuncElement(RW.DSL.ProcedureParser.FuncElementContext)">
            <summary>
            Exit a parse tree produced by the <c>funcElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterFuncInvokeElement(RW.DSL.ProcedureParser.FuncInvokeElementContext)">
            <summary>
            Enter a parse tree produced by the <c>funcInvokeElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitFuncInvokeElement(RW.DSL.ProcedureParser.FuncInvokeElementContext)">
            <summary>
            Exit a parse tree produced by the <c>funcInvokeElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterFuncDefElement(RW.DSL.ProcedureParser.FuncDefElementContext)">
            <summary>
            Enter a parse tree produced by the <c>funcDefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitFuncDefElement(RW.DSL.ProcedureParser.FuncDefElementContext)">
            <summary>
            Exit a parse tree produced by the <c>funcDefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterEventElement(RW.DSL.ProcedureParser.EventElementContext)">
            <summary>
            Enter a parse tree produced by the <c>eventElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitEventElement(RW.DSL.ProcedureParser.EventElementContext)">
            <summary>
            Exit a parse tree produced by the <c>eventElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterDefElement(RW.DSL.ProcedureParser.DefElementContext)">
            <summary>
            Enter a parse tree produced by the <c>defElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitDefElement(RW.DSL.ProcedureParser.DefElementContext)">
            <summary>
            Exit a parse tree produced by the <c>defElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterWaitElement(RW.DSL.ProcedureParser.WaitElementContext)">
            <summary>
            Enter a parse tree produced by the <c>waitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitWaitElement(RW.DSL.ProcedureParser.WaitElementContext)">
            <summary>
            Exit a parse tree produced by the <c>waitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterModuleRefElement(RW.DSL.ProcedureParser.ModuleRefElementContext)">
            <summary>
            Enter a parse tree produced by the <c>moduleRefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitModuleRefElement(RW.DSL.ProcedureParser.ModuleRefElementContext)">
            <summary>
            Exit a parse tree produced by the <c>moduleRefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterCollectElement(RW.DSL.ProcedureParser.CollectElementContext)">
            <summary>
            Enter a parse tree produced by the <c>collectElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitCollectElement(RW.DSL.ProcedureParser.CollectElementContext)">
            <summary>
            Exit a parse tree produced by the <c>collectElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterActionElement(RW.DSL.ProcedureParser.ActionElementContext)">
            <summary>
            Enter a parse tree produced by the <c>actionElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitActionElement(RW.DSL.ProcedureParser.ActionElementContext)">
            <summary>
            Exit a parse tree produced by the <c>actionElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterCheckElement(RW.DSL.ProcedureParser.CheckElementContext)">
            <summary>
            Enter a parse tree produced by the <c>checkElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitCheckElement(RW.DSL.ProcedureParser.CheckElementContext)">
            <summary>
            Exit a parse tree produced by the <c>checkElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterPrintElement(RW.DSL.ProcedureParser.PrintElementContext)">
            <summary>
            Enter a parse tree produced by the <c>printElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitPrintElement(RW.DSL.ProcedureParser.PrintElementContext)">
            <summary>
            Exit a parse tree produced by the <c>printElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterReturnElement(RW.DSL.ProcedureParser.ReturnElementContext)">
            <summary>
            Enter a parse tree produced by the <c>ReturnElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitReturnElement(RW.DSL.ProcedureParser.ReturnElementContext)">
            <summary>
            Exit a parse tree produced by the <c>ReturnElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterLoopElement(RW.DSL.ProcedureParser.LoopElementContext)">
            <summary>
            Enter a parse tree produced by the <c>loopElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitLoopElement(RW.DSL.ProcedureParser.LoopElementContext)">
            <summary>
            Exit a parse tree produced by the <c>loopElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterIfstatElement(RW.DSL.ProcedureParser.IfstatElementContext)">
            <summary>
            Enter a parse tree produced by the <c>ifstatElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitIfstatElement(RW.DSL.ProcedureParser.IfstatElementContext)">
            <summary>
            Exit a parse tree produced by the <c>ifstatElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterExitElement(RW.DSL.ProcedureParser.ExitElementContext)">
            <summary>
            Enter a parse tree produced by the <c>exitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitExitElement(RW.DSL.ProcedureParser.ExitElementContext)">
            <summary>
            Exit a parse tree produced by the <c>exitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterErrorElement(RW.DSL.ProcedureParser.ErrorElementContext)">
            <summary>
            Enter a parse tree produced by the <c>errorElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitErrorElement(RW.DSL.ProcedureParser.ErrorElementContext)">
            <summary>
            Exit a parse tree produced by the <c>errorElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterSetElement(RW.DSL.ProcedureParser.SetElementContext)">
            <summary>
            Enter a parse tree produced by the <c>setElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitSetElement(RW.DSL.ProcedureParser.SetElementContext)">
            <summary>
            Exit a parse tree produced by the <c>setElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterCallElement(RW.DSL.ProcedureParser.CallElementContext)">
            <summary>
            Enter a parse tree produced by the <c>callElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitCallElement(RW.DSL.ProcedureParser.CallElementContext)">
            <summary>
            Exit a parse tree produced by the <c>callElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterProgram(RW.DSL.ProcedureParser.ProgramContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.program"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitProgram(RW.DSL.ProcedureParser.ProgramContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.program"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterStatement(RW.DSL.ProcedureParser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitStatement(RW.DSL.ProcedureParser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterAsync(RW.DSL.ProcedureParser.AsyncContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.async"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitAsync(RW.DSL.ProcedureParser.AsyncContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.async"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterAwait(RW.DSL.ProcedureParser.AwaitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.await"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitAwait(RW.DSL.ProcedureParser.AwaitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.await"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterCommand(RW.DSL.ProcedureParser.CommandContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitCommand(RW.DSL.ProcedureParser.CommandContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterSimple_stmt(RW.DSL.ProcedureParser.Simple_stmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.simple_stmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitSimple_stmt(RW.DSL.ProcedureParser.Simple_stmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.simple_stmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterStmt(RW.DSL.ProcedureParser.StmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.stmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitStmt(RW.DSL.ProcedureParser.StmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.stmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterCmdpara(RW.DSL.ProcedureParser.CmdparaContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.cmdpara"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitCmdpara(RW.DSL.ProcedureParser.CmdparaContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.cmdpara"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterSetExp(RW.DSL.ProcedureParser.SetExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.setExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitSetExp(RW.DSL.ProcedureParser.SetExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.setExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterCollectExp(RW.DSL.ProcedureParser.CollectExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.collectExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitCollectExp(RW.DSL.ProcedureParser.CollectExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.collectExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterPrintExp(RW.DSL.ProcedureParser.PrintExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.printExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitPrintExp(RW.DSL.ProcedureParser.PrintExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.printExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterSuite(RW.DSL.ProcedureParser.SuiteContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.suite"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitSuite(RW.DSL.ProcedureParser.SuiteContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.suite"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterElseif_stat(RW.DSL.ProcedureParser.Elseif_statContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.elseif_stat"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitElseif_stat(RW.DSL.ProcedureParser.Elseif_statContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.elseif_stat"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterElse_stat(RW.DSL.ProcedureParser.Else_statContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.else_stat"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitElse_stat(RW.DSL.ProcedureParser.Else_statContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.else_stat"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterCallExp(RW.DSL.ProcedureParser.CallExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.callExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitCallExp(RW.DSL.ProcedureParser.CallExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.callExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterEventExp(RW.DSL.ProcedureParser.EventExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.eventExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitEventExp(RW.DSL.ProcedureParser.EventExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.eventExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterValueExp(RW.DSL.ProcedureParser.ValueExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.valueExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitValueExp(RW.DSL.ProcedureParser.ValueExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.valueExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterArrayRef(RW.DSL.ProcedureParser.ArrayRefContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayRef"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitArrayRef(RW.DSL.ProcedureParser.ArrayRefContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayRef"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterArray(RW.DSL.ProcedureParser.ArrayContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.array"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitArray(RW.DSL.ProcedureParser.ArrayContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.array"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterArgs(RW.DSL.ProcedureParser.ArgsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.args"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitArgs(RW.DSL.ProcedureParser.ArgsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.args"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterVarArray(RW.DSL.ProcedureParser.VarArrayContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.varArray"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitVarArray(RW.DSL.ProcedureParser.VarArrayContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.varArray"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterIndexExp(RW.DSL.ProcedureParser.IndexExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.indexExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitIndexExp(RW.DSL.ProcedureParser.IndexExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.indexExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterArrayDef(RW.DSL.ProcedureParser.ArrayDefContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayDef"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitArrayDef(RW.DSL.ProcedureParser.ArrayDefContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayDef"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterFuncDef(RW.DSL.ProcedureParser.FuncDefContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcDef"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitFuncDef(RW.DSL.ProcedureParser.FuncDefContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcDef"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterFuncInvoke(RW.DSL.ProcedureParser.FuncInvokeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcInvoke"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitFuncInvoke(RW.DSL.ProcedureParser.FuncInvokeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcInvoke"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterHashtable(RW.DSL.ProcedureParser.HashtableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashtable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitHashtable(RW.DSL.ProcedureParser.HashtableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashtable"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterHashvalue(RW.DSL.ProcedureParser.HashvalueContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashvalue"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitHashvalue(RW.DSL.ProcedureParser.HashvalueContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashvalue"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterInvoke(RW.DSL.ProcedureParser.InvokeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invoke"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitInvoke(RW.DSL.ProcedureParser.InvokeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invoke"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterInvokeItem(RW.DSL.ProcedureParser.InvokeItemContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invokeItem"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitInvokeItem(RW.DSL.ProcedureParser.InvokeItemContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invokeItem"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterString(RW.DSL.ProcedureParser.StringContext)">
            <summary>
            Enter a parse tree produced by <see cref="!:ProcedureParser.string"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitString(RW.DSL.ProcedureParser.StringContext)">
            <summary>
            Exit a parse tree produced by <see cref="!:ProcedureParser.string"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.EnterModule(RW.DSL.ProcedureParser.ModuleContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.module"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.IProcedureListener.ExitModule(RW.DSL.ProcedureParser.ModuleContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.module"/>.
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="T:RW.DSL.ProcedureBaseListener">
            <summary>
            This class provides an empty implementation of <see cref="T:RW.DSL.IProcedureListener"/>,
            which can be extended to create a listener which only needs to handle a subset
            of the available methods.
            </summary>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterBreakElement(RW.DSL.ProcedureParser.BreakElementContext)">
            <summary>
            Enter a parse tree produced by the <c>breakElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitBreakElement(RW.DSL.ProcedureParser.BreakElementContext)">
            <summary>
            Exit a parse tree produced by the <c>breakElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterAsyncElement(RW.DSL.ProcedureParser.AsyncElementContext)">
            <summary>
            Enter a parse tree produced by the <c>asyncElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitAsyncElement(RW.DSL.ProcedureParser.AsyncElementContext)">
            <summary>
            Exit a parse tree produced by the <c>asyncElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterAwaitElement(RW.DSL.ProcedureParser.AwaitElementContext)">
            <summary>
            Enter a parse tree produced by the <c>awaitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitAwaitElement(RW.DSL.ProcedureParser.AwaitElementContext)">
            <summary>
            Exit a parse tree produced by the <c>awaitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterFuncElement(RW.DSL.ProcedureParser.FuncElementContext)">
            <summary>
            Enter a parse tree produced by the <c>funcElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitFuncElement(RW.DSL.ProcedureParser.FuncElementContext)">
            <summary>
            Exit a parse tree produced by the <c>funcElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterFuncInvokeElement(RW.DSL.ProcedureParser.FuncInvokeElementContext)">
            <summary>
            Enter a parse tree produced by the <c>funcInvokeElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitFuncInvokeElement(RW.DSL.ProcedureParser.FuncInvokeElementContext)">
            <summary>
            Exit a parse tree produced by the <c>funcInvokeElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterFuncDefElement(RW.DSL.ProcedureParser.FuncDefElementContext)">
            <summary>
            Enter a parse tree produced by the <c>funcDefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitFuncDefElement(RW.DSL.ProcedureParser.FuncDefElementContext)">
            <summary>
            Exit a parse tree produced by the <c>funcDefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterEventElement(RW.DSL.ProcedureParser.EventElementContext)">
            <summary>
            Enter a parse tree produced by the <c>eventElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitEventElement(RW.DSL.ProcedureParser.EventElementContext)">
            <summary>
            Exit a parse tree produced by the <c>eventElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterDefElement(RW.DSL.ProcedureParser.DefElementContext)">
            <summary>
            Enter a parse tree produced by the <c>defElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitDefElement(RW.DSL.ProcedureParser.DefElementContext)">
            <summary>
            Exit a parse tree produced by the <c>defElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterWaitElement(RW.DSL.ProcedureParser.WaitElementContext)">
            <summary>
            Enter a parse tree produced by the <c>waitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitWaitElement(RW.DSL.ProcedureParser.WaitElementContext)">
            <summary>
            Exit a parse tree produced by the <c>waitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterModuleRefElement(RW.DSL.ProcedureParser.ModuleRefElementContext)">
            <summary>
            Enter a parse tree produced by the <c>moduleRefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitModuleRefElement(RW.DSL.ProcedureParser.ModuleRefElementContext)">
            <summary>
            Exit a parse tree produced by the <c>moduleRefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterCollectElement(RW.DSL.ProcedureParser.CollectElementContext)">
            <summary>
            Enter a parse tree produced by the <c>collectElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitCollectElement(RW.DSL.ProcedureParser.CollectElementContext)">
            <summary>
            Exit a parse tree produced by the <c>collectElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterActionElement(RW.DSL.ProcedureParser.ActionElementContext)">
            <summary>
            Enter a parse tree produced by the <c>actionElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitActionElement(RW.DSL.ProcedureParser.ActionElementContext)">
            <summary>
            Exit a parse tree produced by the <c>actionElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterCheckElement(RW.DSL.ProcedureParser.CheckElementContext)">
            <summary>
            Enter a parse tree produced by the <c>checkElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitCheckElement(RW.DSL.ProcedureParser.CheckElementContext)">
            <summary>
            Exit a parse tree produced by the <c>checkElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterPrintElement(RW.DSL.ProcedureParser.PrintElementContext)">
            <summary>
            Enter a parse tree produced by the <c>printElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitPrintElement(RW.DSL.ProcedureParser.PrintElementContext)">
            <summary>
            Exit a parse tree produced by the <c>printElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterReturnElement(RW.DSL.ProcedureParser.ReturnElementContext)">
            <summary>
            Enter a parse tree produced by the <c>ReturnElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitReturnElement(RW.DSL.ProcedureParser.ReturnElementContext)">
            <summary>
            Exit a parse tree produced by the <c>ReturnElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterLoopElement(RW.DSL.ProcedureParser.LoopElementContext)">
            <summary>
            Enter a parse tree produced by the <c>loopElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitLoopElement(RW.DSL.ProcedureParser.LoopElementContext)">
            <summary>
            Exit a parse tree produced by the <c>loopElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterIfstatElement(RW.DSL.ProcedureParser.IfstatElementContext)">
            <summary>
            Enter a parse tree produced by the <c>ifstatElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitIfstatElement(RW.DSL.ProcedureParser.IfstatElementContext)">
            <summary>
            Exit a parse tree produced by the <c>ifstatElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterExitElement(RW.DSL.ProcedureParser.ExitElementContext)">
            <summary>
            Enter a parse tree produced by the <c>exitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitExitElement(RW.DSL.ProcedureParser.ExitElementContext)">
            <summary>
            Exit a parse tree produced by the <c>exitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterErrorElement(RW.DSL.ProcedureParser.ErrorElementContext)">
            <summary>
            Enter a parse tree produced by the <c>errorElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitErrorElement(RW.DSL.ProcedureParser.ErrorElementContext)">
            <summary>
            Exit a parse tree produced by the <c>errorElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterSetElement(RW.DSL.ProcedureParser.SetElementContext)">
            <summary>
            Enter a parse tree produced by the <c>setElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitSetElement(RW.DSL.ProcedureParser.SetElementContext)">
            <summary>
            Exit a parse tree produced by the <c>setElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterCallElement(RW.DSL.ProcedureParser.CallElementContext)">
            <summary>
            Enter a parse tree produced by the <c>callElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitCallElement(RW.DSL.ProcedureParser.CallElementContext)">
            <summary>
            Exit a parse tree produced by the <c>callElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterProgram(RW.DSL.ProcedureParser.ProgramContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.program"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitProgram(RW.DSL.ProcedureParser.ProgramContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.program"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterStatement(RW.DSL.ProcedureParser.StatementContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitStatement(RW.DSL.ProcedureParser.StatementContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.statement"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterAsync(RW.DSL.ProcedureParser.AsyncContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.async"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitAsync(RW.DSL.ProcedureParser.AsyncContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.async"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterAwait(RW.DSL.ProcedureParser.AwaitContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.await"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitAwait(RW.DSL.ProcedureParser.AwaitContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.await"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterCommand(RW.DSL.ProcedureParser.CommandContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitCommand(RW.DSL.ProcedureParser.CommandContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterSimple_stmt(RW.DSL.ProcedureParser.Simple_stmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.simple_stmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitSimple_stmt(RW.DSL.ProcedureParser.Simple_stmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.simple_stmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterStmt(RW.DSL.ProcedureParser.StmtContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.stmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitStmt(RW.DSL.ProcedureParser.StmtContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.stmt"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterCmdpara(RW.DSL.ProcedureParser.CmdparaContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.cmdpara"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitCmdpara(RW.DSL.ProcedureParser.CmdparaContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.cmdpara"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterSetExp(RW.DSL.ProcedureParser.SetExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.setExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitSetExp(RW.DSL.ProcedureParser.SetExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.setExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterCollectExp(RW.DSL.ProcedureParser.CollectExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.collectExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitCollectExp(RW.DSL.ProcedureParser.CollectExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.collectExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterPrintExp(RW.DSL.ProcedureParser.PrintExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.printExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitPrintExp(RW.DSL.ProcedureParser.PrintExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.printExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterSuite(RW.DSL.ProcedureParser.SuiteContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.suite"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitSuite(RW.DSL.ProcedureParser.SuiteContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.suite"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterElseif_stat(RW.DSL.ProcedureParser.Elseif_statContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.elseif_stat"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitElseif_stat(RW.DSL.ProcedureParser.Elseif_statContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.elseif_stat"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterElse_stat(RW.DSL.ProcedureParser.Else_statContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.else_stat"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitElse_stat(RW.DSL.ProcedureParser.Else_statContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.else_stat"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterCallExp(RW.DSL.ProcedureParser.CallExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.callExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitCallExp(RW.DSL.ProcedureParser.CallExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.callExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterEventExp(RW.DSL.ProcedureParser.EventExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.eventExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitEventExp(RW.DSL.ProcedureParser.EventExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.eventExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterValueExp(RW.DSL.ProcedureParser.ValueExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.valueExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitValueExp(RW.DSL.ProcedureParser.ValueExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.valueExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterArrayRef(RW.DSL.ProcedureParser.ArrayRefContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayRef"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitArrayRef(RW.DSL.ProcedureParser.ArrayRefContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayRef"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterArray(RW.DSL.ProcedureParser.ArrayContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.array"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitArray(RW.DSL.ProcedureParser.ArrayContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.array"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterArgs(RW.DSL.ProcedureParser.ArgsContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.args"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitArgs(RW.DSL.ProcedureParser.ArgsContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.args"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterVarArray(RW.DSL.ProcedureParser.VarArrayContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.varArray"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitVarArray(RW.DSL.ProcedureParser.VarArrayContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.varArray"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterIndexExp(RW.DSL.ProcedureParser.IndexExpContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.indexExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitIndexExp(RW.DSL.ProcedureParser.IndexExpContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.indexExp"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterArrayDef(RW.DSL.ProcedureParser.ArrayDefContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayDef"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitArrayDef(RW.DSL.ProcedureParser.ArrayDefContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayDef"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterFuncDef(RW.DSL.ProcedureParser.FuncDefContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcDef"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitFuncDef(RW.DSL.ProcedureParser.FuncDefContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcDef"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterFuncInvoke(RW.DSL.ProcedureParser.FuncInvokeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcInvoke"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitFuncInvoke(RW.DSL.ProcedureParser.FuncInvokeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcInvoke"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterHashtable(RW.DSL.ProcedureParser.HashtableContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashtable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitHashtable(RW.DSL.ProcedureParser.HashtableContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashtable"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterHashvalue(RW.DSL.ProcedureParser.HashvalueContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashvalue"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitHashvalue(RW.DSL.ProcedureParser.HashvalueContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashvalue"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterInvoke(RW.DSL.ProcedureParser.InvokeContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invoke"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitInvoke(RW.DSL.ProcedureParser.InvokeContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invoke"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterInvokeItem(RW.DSL.ProcedureParser.InvokeItemContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invokeItem"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitInvokeItem(RW.DSL.ProcedureParser.InvokeItemContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invokeItem"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterString(RW.DSL.ProcedureParser.StringContext)">
            <summary>
            Enter a parse tree produced by <see cref="!:ProcedureParser.string"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitString(RW.DSL.ProcedureParser.StringContext)">
            <summary>
            Exit a parse tree produced by <see cref="!:ProcedureParser.string"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterModule(RW.DSL.ProcedureParser.ModuleContext)">
            <summary>
            Enter a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.module"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitModule(RW.DSL.ProcedureParser.ModuleContext)">
            <summary>
            Exit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.module"/>.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="context">The parse tree.</param>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.EnterEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.ExitEveryRule(Antlr4.Runtime.ParserRuleContext)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.VisitTerminal(Antlr4.Runtime.Tree.ITerminalNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:RW.DSL.ProcedureBaseListener.VisitErrorNode(Antlr4.Runtime.Tree.IErrorNode)">
            <inheritdoc/>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="T:RW.DSL.IProcedureVisitor`1">
            <summary>
            This interface defines a complete generic visitor for a parse tree produced
            by <see cref="T:RW.DSL.ProcedureParser"/>.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitBreakElement(RW.DSL.ProcedureParser.BreakElementContext)">
            <summary>
            Visit a parse tree produced by the <c>breakElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitAsyncElement(RW.DSL.ProcedureParser.AsyncElementContext)">
            <summary>
            Visit a parse tree produced by the <c>asyncElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitAwaitElement(RW.DSL.ProcedureParser.AwaitElementContext)">
            <summary>
            Visit a parse tree produced by the <c>awaitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitFuncElement(RW.DSL.ProcedureParser.FuncElementContext)">
            <summary>
            Visit a parse tree produced by the <c>funcElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitFuncInvokeElement(RW.DSL.ProcedureParser.FuncInvokeElementContext)">
            <summary>
            Visit a parse tree produced by the <c>funcInvokeElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitFuncDefElement(RW.DSL.ProcedureParser.FuncDefElementContext)">
            <summary>
            Visit a parse tree produced by the <c>funcDefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitEventElement(RW.DSL.ProcedureParser.EventElementContext)">
            <summary>
            Visit a parse tree produced by the <c>eventElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitDefElement(RW.DSL.ProcedureParser.DefElementContext)">
            <summary>
            Visit a parse tree produced by the <c>defElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitWaitElement(RW.DSL.ProcedureParser.WaitElementContext)">
            <summary>
            Visit a parse tree produced by the <c>waitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitModuleRefElement(RW.DSL.ProcedureParser.ModuleRefElementContext)">
            <summary>
            Visit a parse tree produced by the <c>moduleRefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitCollectElement(RW.DSL.ProcedureParser.CollectElementContext)">
            <summary>
            Visit a parse tree produced by the <c>collectElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitActionElement(RW.DSL.ProcedureParser.ActionElementContext)">
            <summary>
            Visit a parse tree produced by the <c>actionElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitCheckElement(RW.DSL.ProcedureParser.CheckElementContext)">
            <summary>
            Visit a parse tree produced by the <c>checkElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitPrintElement(RW.DSL.ProcedureParser.PrintElementContext)">
            <summary>
            Visit a parse tree produced by the <c>printElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitReturnElement(RW.DSL.ProcedureParser.ReturnElementContext)">
            <summary>
            Visit a parse tree produced by the <c>ReturnElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitLoopElement(RW.DSL.ProcedureParser.LoopElementContext)">
            <summary>
            Visit a parse tree produced by the <c>loopElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitIfstatElement(RW.DSL.ProcedureParser.IfstatElementContext)">
            <summary>
            Visit a parse tree produced by the <c>ifstatElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitExitElement(RW.DSL.ProcedureParser.ExitElementContext)">
            <summary>
            Visit a parse tree produced by the <c>exitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitErrorElement(RW.DSL.ProcedureParser.ErrorElementContext)">
            <summary>
            Visit a parse tree produced by the <c>errorElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitSetElement(RW.DSL.ProcedureParser.SetElementContext)">
            <summary>
            Visit a parse tree produced by the <c>setElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitCallElement(RW.DSL.ProcedureParser.CallElementContext)">
            <summary>
            Visit a parse tree produced by the <c>callElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitProgram(RW.DSL.ProcedureParser.ProgramContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.program"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitStatement(RW.DSL.ProcedureParser.StatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.statement"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitAsync(RW.DSL.ProcedureParser.AsyncContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.async"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitAwait(RW.DSL.ProcedureParser.AwaitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.await"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitCommand(RW.DSL.ProcedureParser.CommandContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.command"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitSimple_stmt(RW.DSL.ProcedureParser.Simple_stmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.simple_stmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitStmt(RW.DSL.ProcedureParser.StmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.stmt"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitCmdpara(RW.DSL.ProcedureParser.CmdparaContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.cmdpara"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitSetExp(RW.DSL.ProcedureParser.SetExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.setExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitCollectExp(RW.DSL.ProcedureParser.CollectExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.collectExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitPrintExp(RW.DSL.ProcedureParser.PrintExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.printExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitSuite(RW.DSL.ProcedureParser.SuiteContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.suite"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitElseif_stat(RW.DSL.ProcedureParser.Elseif_statContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.elseif_stat"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitElse_stat(RW.DSL.ProcedureParser.Else_statContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.else_stat"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitCallExp(RW.DSL.ProcedureParser.CallExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.callExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitEventExp(RW.DSL.ProcedureParser.EventExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.eventExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitValueExp(RW.DSL.ProcedureParser.ValueExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.valueExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitArrayRef(RW.DSL.ProcedureParser.ArrayRefContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayRef"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitArray(RW.DSL.ProcedureParser.ArrayContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.array"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitArgs(RW.DSL.ProcedureParser.ArgsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.args"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitVarArray(RW.DSL.ProcedureParser.VarArrayContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.varArray"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitIndexExp(RW.DSL.ProcedureParser.IndexExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.indexExp"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitArrayDef(RW.DSL.ProcedureParser.ArrayDefContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayDef"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitFuncDef(RW.DSL.ProcedureParser.FuncDefContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcDef"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitFuncInvoke(RW.DSL.ProcedureParser.FuncInvokeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcInvoke"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitHashtable(RW.DSL.ProcedureParser.HashtableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashtable"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitHashvalue(RW.DSL.ProcedureParser.HashvalueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashvalue"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitInvoke(RW.DSL.ProcedureParser.InvokeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invoke"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitInvokeItem(RW.DSL.ProcedureParser.InvokeItemContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invokeItem"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitString(RW.DSL.ProcedureParser.StringContext)">
            <summary>
            Visit a parse tree produced by <see cref="!:ProcedureParser.string"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.IProcedureVisitor`1.VisitModule(RW.DSL.ProcedureParser.ModuleContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.module"/>.
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="T:RW.DSL.ProcedureBaseVisitor`1">
            <summary>
            This class provides an empty implementation of <see cref="T:RW.DSL.IProcedureVisitor`1"/>,
            which can be extended to create a visitor which only needs to handle a subset
            of the available methods.
            </summary>
            <typeparam name="Result">The return type of the visit operation.</typeparam>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitBreakElement(RW.DSL.ProcedureParser.BreakElementContext)">
            <summary>
            Visit a parse tree produced by the <c>breakElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitAsyncElement(RW.DSL.ProcedureParser.AsyncElementContext)">
            <summary>
            Visit a parse tree produced by the <c>asyncElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitAwaitElement(RW.DSL.ProcedureParser.AwaitElementContext)">
            <summary>
            Visit a parse tree produced by the <c>awaitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitFuncElement(RW.DSL.ProcedureParser.FuncElementContext)">
            <summary>
            Visit a parse tree produced by the <c>funcElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitFuncInvokeElement(RW.DSL.ProcedureParser.FuncInvokeElementContext)">
            <summary>
            Visit a parse tree produced by the <c>funcInvokeElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitFuncDefElement(RW.DSL.ProcedureParser.FuncDefElementContext)">
            <summary>
            Visit a parse tree produced by the <c>funcDefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitEventElement(RW.DSL.ProcedureParser.EventElementContext)">
            <summary>
            Visit a parse tree produced by the <c>eventElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitDefElement(RW.DSL.ProcedureParser.DefElementContext)">
            <summary>
            Visit a parse tree produced by the <c>defElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitWaitElement(RW.DSL.ProcedureParser.WaitElementContext)">
            <summary>
            Visit a parse tree produced by the <c>waitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitModuleRefElement(RW.DSL.ProcedureParser.ModuleRefElementContext)">
            <summary>
            Visit a parse tree produced by the <c>moduleRefElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitCollectElement(RW.DSL.ProcedureParser.CollectElementContext)">
            <summary>
            Visit a parse tree produced by the <c>collectElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitActionElement(RW.DSL.ProcedureParser.ActionElementContext)">
            <summary>
            Visit a parse tree produced by the <c>actionElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitCheckElement(RW.DSL.ProcedureParser.CheckElementContext)">
            <summary>
            Visit a parse tree produced by the <c>checkElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitPrintElement(RW.DSL.ProcedureParser.PrintElementContext)">
            <summary>
            Visit a parse tree produced by the <c>printElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitReturnElement(RW.DSL.ProcedureParser.ReturnElementContext)">
            <summary>
            Visit a parse tree produced by the <c>ReturnElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitLoopElement(RW.DSL.ProcedureParser.LoopElementContext)">
            <summary>
            Visit a parse tree produced by the <c>loopElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitIfstatElement(RW.DSL.ProcedureParser.IfstatElementContext)">
            <summary>
            Visit a parse tree produced by the <c>ifstatElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitExitElement(RW.DSL.ProcedureParser.ExitElementContext)">
            <summary>
            Visit a parse tree produced by the <c>exitElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitErrorElement(RW.DSL.ProcedureParser.ErrorElementContext)">
            <summary>
            Visit a parse tree produced by the <c>errorElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitSetElement(RW.DSL.ProcedureParser.SetElementContext)">
            <summary>
            Visit a parse tree produced by the <c>setElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitCallElement(RW.DSL.ProcedureParser.CallElementContext)">
            <summary>
            Visit a parse tree produced by the <c>callElement</c>
            labeled alternative in <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitProgram(RW.DSL.ProcedureParser.ProgramContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.program"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitStatement(RW.DSL.ProcedureParser.StatementContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.statement"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitAsync(RW.DSL.ProcedureParser.AsyncContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.async"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitAwait(RW.DSL.ProcedureParser.AwaitContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.await"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitCommand(RW.DSL.ProcedureParser.CommandContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.command"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitSimple_stmt(RW.DSL.ProcedureParser.Simple_stmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.simple_stmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitStmt(RW.DSL.ProcedureParser.StmtContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.stmt"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitCmdpara(RW.DSL.ProcedureParser.CmdparaContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.cmdpara"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitSetExp(RW.DSL.ProcedureParser.SetExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.setExp"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitCollectExp(RW.DSL.ProcedureParser.CollectExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.collectExp"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitPrintExp(RW.DSL.ProcedureParser.PrintExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.printExp"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitSuite(RW.DSL.ProcedureParser.SuiteContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.suite"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitElseif_stat(RW.DSL.ProcedureParser.Elseif_statContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.elseif_stat"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitElse_stat(RW.DSL.ProcedureParser.Else_statContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.else_stat"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitCallExp(RW.DSL.ProcedureParser.CallExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.callExp"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitEventExp(RW.DSL.ProcedureParser.EventExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.eventExp"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitValueExp(RW.DSL.ProcedureParser.ValueExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.valueExp"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitArrayRef(RW.DSL.ProcedureParser.ArrayRefContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayRef"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitArray(RW.DSL.ProcedureParser.ArrayContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.array"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitArgs(RW.DSL.ProcedureParser.ArgsContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.args"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitVarArray(RW.DSL.ProcedureParser.VarArrayContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.varArray"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitIndexExp(RW.DSL.ProcedureParser.IndexExpContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.indexExp"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitArrayDef(RW.DSL.ProcedureParser.ArrayDefContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.arrayDef"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitFuncDef(RW.DSL.ProcedureParser.FuncDefContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcDef"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitFuncInvoke(RW.DSL.ProcedureParser.FuncInvokeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.funcInvoke"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitHashtable(RW.DSL.ProcedureParser.HashtableContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashtable"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitHashvalue(RW.DSL.ProcedureParser.HashvalueContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.hashvalue"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitInvoke(RW.DSL.ProcedureParser.InvokeContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invoke"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitInvokeItem(RW.DSL.ProcedureParser.InvokeItemContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.invokeItem"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitString(RW.DSL.ProcedureParser.StringContext)">
            <summary>
            Visit a parse tree produced by <see cref="!:ProcedureParser.string"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
        <member name="M:RW.DSL.ProcedureBaseVisitor`1.VisitModule(RW.DSL.ProcedureParser.ModuleContext)">
            <summary>
            Visit a parse tree produced by <see cref="M:RW.DSL.ProcedureParser.module"/>.
            <para>
            The default implementation returns the result of calling <see cref="M:Antlr4.Runtime.Tree.AbstractParseTreeVisitor`1.VisitChildren(Antlr4.Runtime.Tree.IRuleNode)"/>
            on <paramref name="context"/>.
            </para>
            </summary>
            <param name="context">The parse tree.</param>
            <return>The visitor result.</return>
        </member>
    </members>
</doc>
